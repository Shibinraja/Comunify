{
  "env": {
    "browser": true,
    "es2021": true,
    "amd": true,
    "node": true
  },
  "extends": ["eslint:recommended", "plugin:react/recommended", "plugin:@typescript-eslint/recommended"],
  "ignorePatterns": ["dist", "node_modules", "coverage"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "root": true,
  "settings": {
    "react": {
      "createClass": "createReactClass", // Regex for Component Factory to use,
      // default to "createReactClass"
      "pragma": "React", // Pragma to use, default to "React"
      "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
      "version": "detect", // React version. "detect" automatically picks the version you have installed.
      // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
      // It will default to "latest" and warn if missing, and to "detect" in the future
      "flowVersion": "0.53" // Flow version
    },
    "propWrapperFunctions": [
      // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
      "forbidExtraProps",
      { "property": "freeze", "object": "Object" },
      { "property": "myFavoriteWrapper" },
      // for rules that check exact prop wrappers
      { "property": "forbidExtraProps", "exact": true }
    ],
    "componentWrapperFunctions": [
      // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
      "observer", // `property`
      { "property": "styled" }, // `object` is optional
      { "property": "observer", "object": "Mobx" },
      { "property": "observer", "object": "<pragma>" } // sets `object` to whatever value `settings.react.pragma` is set to
    ],
    "formComponents": [
      // Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />
      "CustomForm",
      { "name": "Form", "formAttribute": "endpoint" }
    ],
    "linkComponents": [
      // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
      "Hyperlink",
      { "name": "Link", "linkAttribute": "to" }
    ]
  },
  "globals": {
    "React": true,
    "google": true,
    "mount": true,
    "mountWithRouter": true,
    "shallow": true,
    "shallowWithRouter": true,
    "context": true,
    "expect": true,
    "jsdom": true,
    "JSX": true
  },
  "rules": {
    "camelcase": 0,
    // "react/jsx-curly-spacing": [2, {"when": "always", "allowMultiline": false}],
    "object-curly-spacing": ["error", "always"],
    "fp/no-events": 0,
    "import/no-cycle": 0,
    "import/no-named-as-default-member": 0,
    "import/no-unresolved": 0,
    "linebreak-style": 0,
    "no-continue": 0,
    "no-console": "error",
    "no-extra-parens": 0,
    "no-restricted-syntax": 0,
    "no-unused-expressions": [
      2,
      {
        "allowTaggedTemplates": true
      }
    ],
    "object-curly-newline": [
      2,
      {
        "ExportDeclaration": {
          "minProperties": 3,
          "multiline": true
        },
        "ImportDeclaration": {
          "minProperties": 7,
          "multiline": true
        }
      }
    ],
    "require-await": 0,
    "unicorn/numeric-separators-style": 0,
    "unicorn/prevent-abbreviations": 0,
    "array-bracket-spacing": ["error", "never"],
    "comma-dangle": ["error", "never"],
    "comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "curly": ["error", "all"],
    "eol-last": ["error"],
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1
      }
    ],
    "key-spacing": ["error"],
    "max-len": [
      "error",
      {
        "code": 250,
        "tabWidth": 2,
        "ignoreComments": true,
        "ignoreStrings": true,
        "ignoreRegExpLiterals": true,
        "ignoreUrls": true
      }
    ],
    "default-param-last": ["error"],
    "no-else-return": ["error"],
    "no-mixed-spaces-and-tabs": ["error"],
    "no-multiple-empty-lines": ["error"],
    "no-spaced-func": ["error"],
    "no-trailing-spaces": ["error"],
    "no-undef": ["error"],
    "no-unexpected-multiline": ["error"],
    "no-empty-function": ["error"],
    "no-useless-catch": 0,
    "@typescript-eslint/no-unused-vars":"off",
    "no-unused-vars":"off",
    // "@typescript-eslint/no-unused-vars": [
    //   "error",
    //   {
    //     "args": "after-used",
    //     "vars": "all",
    //     "ignoreRestSiblings": true
    //   }
    // ],
    "quotes": [
      "error",
      "single",
      {
        "allowTemplateLiterals": true,
        "avoidEscape": true
      }
    ],
    "semi": ["error", "always"],
    "space-before-blocks": ["error", "always"],
    "space-before-function-paren": ["error", "never"],
    "space-in-parens": ["error", "never"],
    "space-unary-ops": [
      "error",
      {
        "nonwords": false,
        "overrides": {}
      }
    ],
    // "valid-jsdoc": ["error"]
    // ECMAScript 6 rules
    "arrow-body-style": [
      "error",
      "as-needed",
      {
        "requireReturnForObjectLiteral": false
      }
    ],
    "arrow-parens": ["error", "always"],
    "arrow-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "no-class-assign": ["error"],
    "no-const-assign": ["error"],
    "no-dupe-class-members": ["error"],
    "no-duplicate-imports": ["error"],
    // "no-new-symbol": ["error"],
    "no-useless-rename": ["error"],
    "no-var": ["error"],
    "object-shorthand": [
      "error",
      "always",
      {
        "avoidQuotes": true,
        "ignoreConstructors": false
      }
    ],
    "prefer-arrow-callback": [
      "error",
      {
        "allowNamedFunctions": false,
        "allowUnboundThis": true
      }
    ],
    "prefer-const": ["error"],
    "prefer-rest-params": ["error"],
    "prefer-template": ["error"],
    "template-curly-spacing": ["error", "never"]
  },

  "plugins": ["react", "@typescript-eslint"]
}
